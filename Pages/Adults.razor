@page "/adults"
@using Assigment_1.Data
@using Models
@inject IUser users;

<p>
    Filter by Adults Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width:50px"/>
</p>

@if (AdultsToShow == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!AdultsToShow.Any()) {
    <p>
        <em>No Adults items exist. Please add some.</em>
    </p>
} else {
    <table class="table">
        <thead>
        <tr>
            <th>Adult ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in AdultsToShow) {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> AdultsToShow;
    private IList<Adult> allAdults;

    private int? filterById;

    private void FilterByUserId(ChangeEventArgs changeEventArgs) {
        filterById = null;
        try {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) { }
        ExecuteFilter();
    }
    
    private void ExecuteFilter() {
        AdultsToShow = allAdults.Where(t => 
            (filterById != null && t.Id == filterById || filterById == null) 
        ).ToList();
    }


}
